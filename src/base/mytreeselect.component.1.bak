import { Component, OnInit, Input, ViewChild, ElementRef, HostListener } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import {
  trigger,
  state,
  style,
  animate,
  transition
} from '@angular/animations';

import { ValueListDataService } from './valuelist-data.service';

declare var $: any;

@Component({
  selector: 'my-tree-select',
  template: ` 
              <div class="tree-select-container form-control">
                <div #ctrl class="tree-select-ctrl" >
                  <span  class="text">
                    <span *ngIf="!text" class="select-placeholder">{{treeSetting.placeholder}}</span>
                    <span *ngIf="text">{{text}}</span>
                  </span>
                  <!-- <input type="hidden"> -->
                </div>
                <div class="tree-select-drop" [@toggleDrop]="dropDisplay">
                  <div class="tree-select-search">
                    <input type="text" class="" [(ngModel)]="keywords" (keyup)="searchNode(keywords)" placeholder="{{treeSetting.searchTip}}">
                    <i class="icon icon-search"></i>
                  </div>
                  <ul #tree class="ztree tree-select-list"></ul>
                  <div class="tree-select-btn" *ngIf="treeSetting.btnMode">
                      <button type="button" class="btn btn-mini btn-primary" (click)="confirm($event)">确定</button>
                      <button type="button" class="btn btn-mini btn-default" (click)="clear()">清除</button>
                      <button type="button" class="btn btn-mini btn-default" (click)="close($event)">关闭</button>
                  </div>
                </div>
              </div>
            `,
  styles: [
    `
      :host {
        #display: inline-block;
      }
      .tree-select-container {
        position: relative;
      }
      .tree-select-ctrl span.text {
        overflow: hidden;
        text-overflow: ellipsis;
        cursor: pointer;
        width:100%;
      }
      .tree-select-ctrl .select-placeholder {
        color: #777;
        width:100%;
      }
      .tree-select-drop {
        position: absolute;
        width: 100%;
        z-index: 10;
        margin-left:-11px;       
        margin-top:0px;
        padding-right:2px;
        overflow: hidden;
        visibility: hidden;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 0 0 4px 4px;
      }
      .tree-select-search {
        position: relative;
        padding: 5px;
      }
      .tree-select-search i.icon {
        position: absolute;
        right: 10px;
        top: 50%;
        margin-top: -7px;
      }
      .tree-select-list {
        max-height: 250px;
        padding-top: 0;
        overflow: auto;
      }
      .tree-select-btn {
        position: absolute;
        left: 0;
        width: 100%;
        text-align: center;
      }
    `
  ],
  animations: [
    trigger('toggleDrop', [
      state('show', style({
        visibility: 'visible',
        height: '*',
        paddingBottom: '28px'
      })),
      state('hide', style({
        visibility: 'hidden',
        height: 0
      })),
      transition('* => *', animate('300ms'))
    ])
  ]
})

export class MyTreeSelectComponent implements OnInit, ControlValueAccessor {

  @Input() options: any = {};

  _data: Array<any>;
  @Input()
  set data(val: Array<any>) {
    this._data = val;
    if (this._data) {
      this._initTree(this.treeSetting, this._data);
    }
  }
  get data(): Array<any> {
    return this._data;
  }

  @ViewChild('tree') treeEle: ElementRef;
  @ViewChild('ctrl') ctrlEle: ElementRef;
  element: any;  // 组件Dom

  defaults: any = {
    url: null,
    method: 'GET',
    valueKey: 'name',
    searchKey: 'name',
    btnMode: false,
    multiple: false,
    searchTip: '请输入搜索词',
    placeholder: '请选择',
    data: {
      key: {}
    },
    check: {
      chkboxType: { 'Y': 'ps', 'N': 'ps' }
    },
    callback: {}
  };

  dropDisplay: string = 'hide';
  treeSetting: any = {};
  tree: any;  // ztree对象
  lastValue: string;
  keywords: string;

  treeNode: Array<any> = [];  // 储存选中节点数据的数组
  text: string;
  value: any;

  @HostListener('document:click')
  documentClick() {
    // if (!this.value) {
    this._treeReset();
    // }

    this.dropDisplay = 'hide';  // 隐藏下拉树
  }

  @HostListener('click', ['$event'])
  click(event) {
    event.stopPropagation(); // 禁止冒泡

    if (event.target != this.ctrlEle.nativeElement && event.target.parentNode != this.ctrlEle.nativeElement) {
      return;
    }

    if (this.value) {
      let nodes = this.tree.transformToArray(this.tree.getNodes());

      if (this.treeSetting.multiple) {
        nodes.forEach((node, i) => {
          if (this.value.split(',').indexOf(node[this.treeSetting.valueKey]) > -1) {
            this.treeNode.push(node);

            // let checkTypeFlag = this.treeSetting.check.chkboxType['Y'] == 'ps' ? true : false;
            this.tree.checkNode(node, true, false);
          }
        });
      } else {
        nodes.some((node, i) => {
          if (this.value === node[this.treeSetting.valueKey]) {
            this.tree.selectNode(node);
            return true;
          }
        });
      }
    }

    this.dropDisplay = 'show';  // 显示下拉树
  }

  constructor(
    private _element: ElementRef,
    public _control: NgControl,
    private dataService: ValueListDataService
  ) {
    if (this._control) {
      this._control.valueAccessor = this;
    }
  }

  ngOnInit() {
    this.element = this._element.nativeElement;

    this._loadFiles(); // 加载zTree文件
    this.treeSetting = $.extend(true, {}, this.defaults, this.options);

    if (!this.options.valueKey && this.treeSetting.data.key.name) {
      this.treeSetting.valueKey = this.treeSetting.data.key.name;
    }

    if (!this.options.searchKey && this.treeSetting.data.key.name) {
      this.treeSetting.searchKey = this.treeSetting.data.key.name;
    }

    if (this.element.getAttribute('multiple') != undefined) {
      this.treeSetting.multiple = true;
    }

    if (this.treeSetting.multiple) {
      this.treeSetting.check.enable = true;  // 显示多选框
      this.treeSetting.check.chkStyle = 'checkbox';
      // this.treeSetting.btnMode = true;
    }

    this._bindEvent();
    let dataUrl = this.options.url;
    if (dataUrl == null) {
      dataUrl = this.element.getAttribute('data-source');
    }
    //debugger;
    if (dataUrl) {
      this.dataService.getTreeData(dataUrl).then(data => {
        this.data = data;
        this._initTree(this.treeSetting, this.data);
      });
    } else {
      this._initTree(this.treeSetting, this.data);
    }
  }

  writeValue(value: string) {
    if (value) {
      this.value = value;
    }
  }

  registerOnChange(fn: (value: any) => void) {
    this._onChange = fn;
  }

  registerOnTouched(fn: any) { }

  _onChange = (value: any) => { };

  confirm(event?: MouseEvent) {
    if (event) event.stopPropagation(); // 禁止冒泡

    let nameKey = this.treeSetting.data.key.name || 'name';
    this.text = this.treeNode.map(node => {
      return node[nameKey];
    }).join(',');

    this.value = this.treeNode.map(node => {
      return node[this.treeSetting.valueKey];
    }).join(',');

    this._onChange(this.value);

    if (this.treeSetting.btnMode) {
      this._treeReset();
      // 隐藏下拉树
      this.dropDisplay = 'hide';
    }
  }

  clear() {
    this._treeReset();

    this.text = null;
    this.value = null;

    this._onChange(this.value);
  }

  close(event?: MouseEvent) {
    if (event) event.stopPropagation(); // 禁止冒泡

    // if (!this.value) {
    this._treeReset();
    // }

    // 隐藏下拉树
    this.dropDisplay = 'hide';
  }

  private _treeReset() {
    // 清空选中节点数据
    this.treeNode = [];
    // 清除勾选,
    this.tree.checkAllNodes(false);
    // 取消节点选中
    this.tree.cancelSelectedNode();
    // 清除搜索
    if (this.keywords) {
      this.keywords = '';
      this.searchNode('');
    }
  }

  private _bindEvent() {
    let _this = this;
    if (this.treeSetting.multiple) {
      let _temp = this.treeSetting.callback.onCheck;
      this.treeSetting.callback.onCheck = function (event, treeId, treeNode) {
        // if (treeNode.checked) {
        //   _this.treeNode.push(treeNode);
        // } else {
        //   let i = _this.treeNode.indexOf(treeNode);
        //   _this.treeNode.splice(i, 1);
        // }

        _this.treeNode = _this.tree.getCheckedNodes(true);

        if (!_this.treeSetting.btnMode) {
          _this.confirm();
        }

        if (typeof _temp == 'function') _temp();
      }
    } else {
      let _temp = this.treeSetting.callback.onClick;
      this.treeSetting.callback.onClick = function (event, treeId, treeNode) {
        // _this.treeNode[0] = treeNode;

        _this.treeNode = _this.tree.getSelectedNodes();

        if (!_this.treeSetting.btnMode) {
          _this.confirm();
        }

        if (typeof _temp == 'function') _temp();
      }
    }
  }

  private _initTree(setting, data) {
    if ($.fn.zTree) {
      this.tree = $.fn.zTree.init($(this.treeEle.nativeElement), setting, data);
    }
  }

  //搜索节点
  public searchNode(val) {
    // 取得输入的关键字的值
    var value = $.trim(val);
    // 按名字查询
    var keyType = this.treeSetting.searchKey;
    // 如果与上次相同，不查询。
    if (this.lastValue === value) {
      return;
    }
    // 保存最后一次查询
    this.lastValue = value;
    var nodes = this.tree.getNodes();
    // 如果要查的是空字串，不查询
    if (value === '') {
      this._showAllNode(nodes);
      return;
    }
    this._hideAllNode(nodes);
    var nodeList = this.tree.getNodesByParamFuzzy(keyType, value);
    this._updateNodes(nodeList);
  }

  //隐藏所有节点
  private _hideAllNode(nodes) {
    nodes = this.tree.transformToArray(nodes);
    for (var i = nodes.length - 1; i >= 0; i--) {
      this.tree.hideNode(nodes[i]);
    }
  }

  //显示所有节点
  private _showAllNode(nodes) {
    var nodes = this.tree.transformToArray(nodes);
    for (var i = nodes.length - 1; i >= 0; i--) {
      if (nodes[i].getParentNode() != null) {
        this.tree.expandNode(nodes[i], false, false, false, false);
      } else {
        this.tree.expandNode(nodes[i], true, true, false, false);
      }
      this.tree.showNode(nodes[i]);
      this._showAllNode(nodes[i].children);
    }
  }

  //更新节点状态
  private _updateNodes(nodeList) {
    this.tree.showNodes(nodeList);
    for (var i = 0, l = nodeList.length; i < l; i++) {
      //展开当前节点的父节点
      this.tree.showNode(nodeList[i].getParentNode());
      //显示展开符合条件节点的父节点
      while (nodeList[i].getParentNode() != null) {
        this.tree.expandNode(nodeList[i].getParentNode(), true, false, false);
        nodeList[i] = nodeList[i].getParentNode();
        this.tree.showNode(nodeList[i].getParentNode());
      }
      //显示根节点
      this.tree.showNode(nodeList[i].getParentNode());
      //展开根节点
      this.tree.expandNode(nodeList[i].getParentNode(), true, false, false);
    }
  }

  private _loadFiles() {
    if (!$('#ztreeFile-3').length) {
      $('<link>').attr({ id: 'ztreeFile-1', rel: "stylesheet", type: "text/css", href: "/assets/jquery/ztree/css/zTreeStyle/zTreeStyle.css" }).appendTo("head");
      $('<script>').attr({ id: 'ztreeFile-2', src: "/assets/jquery/ztree/js/jquery.ztree.all.min.js" }).appendTo("head");
      $('<script>').attr({ id: 'ztreeFile-3', src: "/assets/jquery/ztree/js/jquery.ztree.exhide.min.js" }).appendTo("head");
    }
  }
}